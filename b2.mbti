package "gmlewis/b2"

import(
  "gmlewis/spin-moonbit-sdk/common"
  "gmlewis/spin-moonbit-sdk/interface/imports/wasi/http/types"
)

// Values
fn consume_object(Client, String, hash~ : &@common.HashFunc?, debug~ : Bool = ..) -> String!ClientError

fn get_download_authorization_url(Client, String, valid_duration_in_seconds~ : Int = .., debug~ : Bool = ..) -> String!ClientError

fn stream_object(Client, String, @types.ResponseOutparam, hash~ : &@common.HashFunc?, debug~ : Bool = ..) -> String!ClientError

// Types and methods
type Client
impl Client {
  consume_object(Self, String, hash~ : &@common.HashFunc?, debug~ : Bool = ..) -> String!ClientError
  get_download_authorization_url(Self, String, valid_duration_in_seconds~ : Int = .., debug~ : Bool = ..) -> String!ClientError
  new(String, String, String, String, debug~ : Bool = ..) -> Self!ClientError
  stream_object(Self, String, @types.ResponseOutparam, hash~ : &@common.HashFunc?, debug~ : Bool = ..) -> String!ClientError
}
impl Show for Client

pub(all) type! ClientError String
impl Show for ClientError

// Type aliases

// Traits

